<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head>


<meta http-equiv="content-type" content="text/html; charset=utf-8"><title>C++ code colored by C++2HTML</title>

<meta name="generator" content="C++2HTML by Jasper Bedaux"><!-- To generate your own colored code visit http://www.bedaux.net/cpp2html/ -->

<style type="text/css">
.comment { color: #999999; font-style: italic; }
.pre { color: #000099; }
.string { color: #009900; }
.char { color: #009900; }
.float { color: #996600; }
.int { color: #999900; }
.bool { color: #000000; font-weight: bold; }
.type { color: #FF6633; }
.flow { color: #FF0000; }
.keyword { color: #990000; }
.operator { color: #663300; font-weight: bold; }
</style></head><body>
<pre><span class="keyword">template</span><span class="operator"> &lt;</span><span class="keyword">class</span> Type<span class="operator">,</span><span class="keyword">class</span> Int<span class="operator">=</span><span class="type">unsigned int</span><span class="operator">,</span>Int End<span class="operator">=</span>INT_MAX<span class="operator">/</span><span class="int">2</span><span class="operator">,</span>Type Default<span class="operator">=</span><span class="int">0</span><span class="operator">&gt;</span><span class="keyword">
class</span> add_sum_tree<span class="operator">{</span><span class="keyword">
  class</span> node<span class="operator">{</span><span class="keyword">
  public</span><span class="operator">:</span>
    Type Itself<span class="operator">,</span>Itschilds<span class="operator">;</span>
    node<span class="operator"> *</span>next<span class="operator">[</span><span class="int">2</span><span class="operator">];</span>
    node<span class="operator">(){</span> Itself<span class="operator">=</span><span class="int">0</span><span class="operator">,</span>Itschilds<span class="operator">=</span><span class="int">0</span><span class="operator">;</span> next<span class="operator">[</span><span class="int">0</span><span class="operator">]=</span>next<span class="operator">[</span><span class="int">1</span><span class="operator">]=</span><span class="int">0</span><span class="operator">;
    }</span>
    node<span class="operator">*</span> child<span class="operator">(</span><span class="type">int</span> s<span class="operator">){</span><span class="flow">
      if</span><span class="operator"> (!</span>next<span class="operator">[</span>s<span class="operator">])</span> next<span class="operator">[</span>s<span class="operator">]=</span><span class="keyword">new</span> node<span class="operator">();</span><span class="flow">
      return</span><span class="operator">(</span>next<span class="operator">[</span>s<span class="operator">]);
    }
  }*</span>root<span class="operator">;</span><span class="keyword">
public</span><span class="operator">:</span>
  add_sum_tree<span class="operator">(){</span> root<span class="operator">=</span><span class="keyword">new</span> node<span class="operator">();</span> root<span class="operator">-&gt;</span>Itself<span class="operator">=</span>Default<span class="operator">;
  }</span><span class="type">
  void</span> add<span class="operator">(</span>Int where<span class="operator">,</span><span class="keyword">const</span> Type<span class="operator"> &amp;</span>s<span class="operator">){</span>
    Int A<span class="operator">=</span><span class="int">0</span><span class="operator">,</span>B<span class="operator">=</span>End<span class="operator">;</span>
    node<span class="operator"> *</span>temp<span class="operator">=</span>root<span class="operator">;</span>
    Int Mid<span class="operator">;</span><span class="flow">
    while</span><span class="operator"> (</span>B<span class="operator">&gt;</span>where<span class="operator">){</span>
      temp<span class="operator">-&gt;</span>Itschilds<span class="operator">+=(</span>where<span class="operator">-</span>A<span class="operator">+</span><span class="int">1</span><span class="operator">)*</span>s<span class="operator">;</span>
      Mid<span class="operator">=(</span>A<span class="operator">+</span>B<span class="operator">)/</span><span class="int">2</span><span class="operator">;</span><span class="flow">
      if</span><span class="operator"> (</span>Mid<span class="operator"> &gt;=</span> where<span class="operator">){</span>
	temp<span class="operator">=</span>temp<span class="operator">-&gt;</span>child<span class="operator">(</span><span class="int">0</span><span class="operator">);</span>
	B<span class="operator">=</span>Mid<span class="operator">;
      }</span><span class="flow">else</span><span class="operator">{</span>
	temp<span class="operator">-&gt;</span>child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>Itself<span class="operator">+=</span>s<span class="operator">;</span>
	temp<span class="operator">=</span>temp<span class="operator">-&gt;</span>child<span class="operator">(</span><span class="int">1</span><span class="operator">);</span>
	A<span class="operator">=</span>Mid<span class="operator">+</span><span class="int">1</span><span class="operator">;
      }
    }</span>
    temp<span class="operator">-&gt;</span>Itself<span class="operator">+=</span>s<span class="operator">;
  }</span><span class="type">
  void</span> add<span class="operator">(</span>Int a<span class="operator">,</span>Int b<span class="operator">,</span><span class="keyword">const</span> Type<span class="operator"> &amp;</span>s<span class="operator">){</span>
    add<span class="operator">(</span>b<span class="operator">,</span>s<span class="operator">);</span><span class="flow">
    if</span><span class="operator"> (</span>a<span class="operator">)</span> add<span class="operator">(</span>a<span class="operator">-</span><span class="int">1</span><span class="operator">,</span>Type<span class="operator">(</span><span class="int">0</span><span class="operator">)-</span>s<span class="operator">);
  }</span>
  Type sum<span class="operator">(</span>Int where<span class="operator">){</span>
    Int A<span class="operator">=</span><span class="int">0</span><span class="operator">,</span>B<span class="operator">=</span>End<span class="operator">,</span>Mid<span class="operator">;</span>
    Type ans<span class="operator">=</span><span class="int">0</span><span class="operator">;</span>
    node<span class="operator"> *</span>temp<span class="operator">=</span>root<span class="operator">;</span><span class="flow">
    while</span><span class="operator"> (</span>B<span class="operator">&gt;</span>where<span class="operator">){</span>
      ans<span class="operator">+=</span>temp<span class="operator">-&gt;</span>Itself<span class="operator">*(</span>where<span class="operator">-</span>A<span class="operator">+</span><span class="int">1</span><span class="operator">);</span>
      Mid<span class="operator">=(</span>A<span class="operator">+</span>B<span class="operator">)/</span><span class="int">2</span><span class="operator">;</span><span class="flow">
      if</span><span class="operator"> (</span>Mid<span class="operator"> &gt;=</span> where<span class="operator">){</span>
	temp<span class="operator">=</span>temp<span class="operator">-&gt;</span>child<span class="operator">(</span><span class="int">0</span><span class="operator">);</span>
	B<span class="operator">=</span>Mid<span class="operator">;
      }</span><span class="flow">else</span><span class="operator">{</span><span class="flow">
	if</span><span class="operator"> (</span>temp<span class="operator">-&gt;</span>next<span class="operator">[</span><span class="int">0</span><span class="operator">])</span>
	  ans<span class="operator">+=(</span>temp<span class="operator">-&gt;</span>next<span class="operator">[</span><span class="int">0</span><span class="operator">]-&gt;</span>Itself<span class="operator">)*(</span>Mid<span class="operator">-</span>A<span class="operator">+</span><span class="int">1</span><span class="operator">)+</span>temp<span class="operator">-&gt;</span>next<span class="operator">[</span><span class="int">0</span><span class="operator">]-&gt;</span>Itschilds<span class="operator">;</span>
	temp<span class="operator">=</span>temp<span class="operator">-&gt;</span>child<span class="operator">(</span><span class="int">1</span><span class="operator">);</span>
	A<span class="operator">=</span>Mid<span class="operator">+</span><span class="int">1</span><span class="operator">;
      }
    }</span>
    ans<span class="operator">+=</span>temp<span class="operator">-&gt;</span>Itschilds<span class="operator">+</span>temp<span class="operator">-&gt;</span>Itself<span class="operator">*(</span>B<span class="operator">-</span>A<span class="operator">+</span><span class="int">1</span><span class="operator">);</span><span class="flow">
    return</span><span class="operator">(</span>ans<span class="operator">);
  }</span>
  Type sum<span class="operator">(</span>Int a<span class="operator">,</span>Int b<span class="operator">){</span><span class="flow">
    if</span><span class="operator"> (</span>a<span class="operator">)</span><span class="flow"> return</span><span class="operator">(</span>sum<span class="operator">(</span>b<span class="operator">)-</span>sum<span class="operator">(</span>a<span class="operator">-</span><span class="int">1</span><span class="operator">));</span><span class="flow">
    return</span><span class="operator">(</span>sum<span class="operator">(</span>b<span class="operator">));
  }
};</span><span class="keyword">

template</span><span class="operator"> &lt;</span><span class="keyword">class</span> Type<span class="operator">,</span><span class="keyword">class</span> Int<span class="operator">=</span><span class="type">unsigned int</span><span class="operator">,</span>Int End<span class="operator">=</span>INT_MAX<span class="operator">/</span><span class="int">2</span><span class="operator">,</span>Type Default<span class="operator">=</span><span class="int">0</span><span class="operator">&gt;</span><span class="keyword">
class</span> min_max_tree<span class="operator">{</span><span class="keyword">
  class</span> node<span class="operator">{</span><span class="keyword">
  public</span><span class="operator">:</span>
    Int x<span class="operator">,</span>y<span class="operator">;</span>
    Type _min<span class="operator">,</span>_max<span class="operator">;</span>
    node<span class="operator"> *</span>next<span class="operator">[</span><span class="int">2</span><span class="operator">];</span>
    node<span class="operator">(){
    }</span>
    node<span class="operator">(</span>Int a<span class="operator">,</span>Int b<span class="operator">,</span>Type Min<span class="operator">,</span>Type Max<span class="operator">){</span> x<span class="operator">=</span>a<span class="operator">;</span> y<span class="operator">=</span>b<span class="operator">;</span> _min<span class="operator">=</span>Min<span class="operator">;</span> _max<span class="operator">=</span>Max<span class="operator">;</span> next<span class="operator">[</span><span class="int">0</span><span class="operator">]=</span>next<span class="operator">[</span><span class="int">1</span><span class="operator">]=</span><span class="int">0</span><span class="operator">;
    }</span>
    node<span class="operator"> *</span>child<span class="operator">(</span><span class="type">int</span> s<span class="operator">){</span><span class="flow">
      if</span><span class="operator"> (!</span>next<span class="operator">[</span>s<span class="operator">]){</span><span class="flow">
	if</span><span class="operator"> (</span>s<span class="operator">==</span><span class="int">0</span><span class="operator">)</span> next<span class="operator">[</span>s<span class="operator">]=</span><span class="keyword">new</span> node<span class="operator">(</span>x<span class="operator">,(</span>x<span class="operator">+</span>y<span class="operator">)/</span><span class="int">2</span><span class="operator">,</span>_min<span class="operator">,</span>_max<span class="operator">);</span><span class="flow">
	else</span> next<span class="operator">[</span>s<span class="operator">]=</span><span class="keyword">new</span> node<span class="operator">((</span>x<span class="operator">+</span>y<span class="operator">)/</span><span class="int">2</span><span class="operator">+</span><span class="int">1</span><span class="operator">,</span>y<span class="operator">,</span>_min<span class="operator">,</span>_max<span class="operator">);
      }</span><span class="flow">
      return</span><span class="operator">(</span>next<span class="operator">[</span>s<span class="operator">]);
    }</span><span class="type">
    void</span> set<span class="operator">(</span>Int a<span class="operator">,</span>Int b<span class="operator">,</span><span class="keyword">const</span> Type<span class="operator"> &amp;</span>s<span class="operator">){</span>
      a<span class="operator">=</span>std<span class="operator">::</span>max<span class="operator">(</span>a<span class="operator">,</span>x<span class="operator">);</span> b<span class="operator">=</span>std<span class="operator">::</span>min<span class="operator">(</span>b<span class="operator">,</span>y<span class="operator">);</span><span class="flow">
      if</span><span class="operator"> (</span>x<span class="operator">==</span>a<span class="operator"> &amp;&amp;</span> y<span class="operator">==</span>b<span class="operator">){</span>
	_min<span class="operator">=</span>_max<span class="operator">=</span>s<span class="operator">;</span>
	next<span class="operator">[</span><span class="int">0</span><span class="operator">]=</span>next<span class="operator">[</span><span class="int">1</span><span class="operator">]=</span><span class="int">0</span><span class="operator">;</span><span class="flow">
	return</span><span class="operator">;
      }</span><span class="flow">
      if</span><span class="operator"> (</span>a<span class="operator"> &lt;= (</span>x<span class="operator">+</span>y<span class="operator">)/</span><span class="int">2</span><span class="operator">)</span> child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>set<span class="operator">(</span>a<span class="operator">,</span>b<span class="operator">,</span>s<span class="operator">);</span><span class="flow">
      if</span><span class="operator"> (</span>b<span class="operator"> &gt; (</span>x<span class="operator">+</span>y<span class="operator">)/</span><span class="int">2</span><span class="operator">)</span> child<span class="operator">(</span><span class="int">1</span><span class="operator">)-&gt;</span>set<span class="operator">(</span>a<span class="operator">,</span>b<span class="operator">,</span>s<span class="operator">);</span>
      _max<span class="operator">=</span>std<span class="operator">::</span>max<span class="operator">(</span>child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>_max<span class="operator">,</span>child<span class="operator">(</span><span class="int">1</span><span class="operator">)-&gt;</span>_max<span class="operator">);</span>
      _min<span class="operator">=</span>std<span class="operator">::</span>min<span class="operator">(</span>child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>_min<span class="operator">,</span>child<span class="operator">(</span><span class="int">1</span><span class="operator">)-&gt;</span>_min<span class="operator">);
    }</span>
    Type max<span class="operator">(</span>Int a<span class="operator">,</span>Int b<span class="operator">){</span>
      a<span class="operator">=::</span>max<span class="operator">(</span>x<span class="operator">,</span>a<span class="operator">);</span> b<span class="operator">=</span>std<span class="operator">::</span>min<span class="operator">(</span>y<span class="operator">,</span>b<span class="operator">);</span><span class="flow">
      if</span><span class="operator"> ((</span>a<span class="operator">==</span>x<span class="operator"> &amp;&amp;</span> b<span class="operator">==</span>y<span class="operator">) || (!</span>next<span class="operator">[</span><span class="int">0</span><span class="operator">] &amp;&amp; !</span>next<span class="operator">[</span><span class="int">1</span><span class="operator">]))</span><span class="flow"> return</span><span class="operator">(</span>_max<span class="operator">);</span><span class="flow">
      if</span><span class="operator"> (</span>a<span class="operator"> &gt; (</span>x<span class="operator">+</span>y<span class="operator">)/</span><span class="int">2</span><span class="operator">)</span><span class="flow"> return</span><span class="operator">(</span>child<span class="operator">(</span><span class="int">1</span><span class="operator">)-&gt;</span>max<span class="operator">(</span>a<span class="operator">,</span>b<span class="operator">));</span><span class="flow">
      if</span><span class="operator"> (</span>b<span class="operator"> &lt;= (</span>x<span class="operator">+</span>y<span class="operator">)/</span><span class="int">2</span><span class="operator">)</span><span class="flow"> return</span><span class="operator">(</span>child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>max<span class="operator">(</span>a<span class="operator">,</span>b<span class="operator">));</span><span class="flow">
      return</span><span class="operator">(</span>std<span class="operator">::</span>max<span class="operator">(</span>child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>max<span class="operator">(</span>a<span class="operator">,</span>b<span class="operator">),</span>child<span class="operator">(</span><span class="int">1</span><span class="operator">)-&gt;</span>max<span class="operator">(</span>a<span class="operator">,</span>b<span class="operator">)));
    }</span>
    Type min<span class="operator">(</span>Int a<span class="operator">,</span>Int b<span class="operator">){</span>
      a<span class="operator">=</span>std<span class="operator">::</span>max<span class="operator">(</span>x<span class="operator">,</span>a<span class="operator">);</span> b<span class="operator">=</span>std<span class="operator">::</span>min<span class="operator">(</span>y<span class="operator">,</span>b<span class="operator">);</span><span class="flow">
      if</span><span class="operator"> ((</span>a<span class="operator">==</span>x<span class="operator"> &amp;&amp;</span> b<span class="operator">==</span>y<span class="operator">) || (!</span>next<span class="operator">[</span><span class="int">0</span><span class="operator">] &amp;&amp; !</span>next<span class="operator">[</span><span class="int">1</span><span class="operator">]))</span><span class="flow"> return</span><span class="operator">(</span>_min<span class="operator">);</span><span class="flow">
      if</span><span class="operator"> (</span>a<span class="operator"> &gt; (</span>x<span class="operator">+</span>y<span class="operator">)/</span><span class="int">2</span><span class="operator">)</span><span class="flow"> return</span><span class="operator">(</span>child<span class="operator">(</span><span class="int">1</span><span class="operator">)-&gt;</span>min<span class="operator">(</span>a<span class="operator">,</span>b<span class="operator">));</span><span class="flow">
      if</span><span class="operator"> (</span>b<span class="operator"> &lt;= (</span>x<span class="operator">+</span>y<span class="operator">)/</span><span class="int">2</span><span class="operator">)</span><span class="flow"> return</span><span class="operator">(</span>child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>min<span class="operator">(</span>a<span class="operator">,</span>b<span class="operator">));</span><span class="flow">
      return</span><span class="operator">(</span>std<span class="operator">::</span>min<span class="operator">(</span>child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>min<span class="operator">(</span>a<span class="operator">,</span>b<span class="operator">),</span>child<span class="operator">(</span><span class="int">1</span><span class="operator">)-&gt;</span>min<span class="operator">(</span>a<span class="operator">,</span>b<span class="operator">)));
    }
  }*</span>root<span class="operator">;</span><span class="keyword">
public</span><span class="operator">:</span>
  min_max_tree<span class="operator">(){</span> root<span class="operator">=</span><span class="keyword">new</span> node<span class="operator">(</span><span class="int">0</span><span class="operator">,</span>End<span class="operator">,</span>Default<span class="operator">,</span>Default<span class="operator">);
  }</span><span class="type">
  void</span> set<span class="operator">(</span>Int a<span class="operator">,</span>Int b<span class="operator">,</span>Type c<span class="operator">){</span> root<span class="operator">-&gt;</span>set<span class="operator">(</span>a<span class="operator">,</span>b<span class="operator">,</span>c<span class="operator">);
  }</span><span class="keyword">
  inline</span> Type max<span class="operator">(</span>Int a<span class="operator">,</span>Int b<span class="operator">){</span><span class="flow"> return</span><span class="operator">(</span>root<span class="operator">-&gt;</span>max<span class="operator">(</span>a<span class="operator">,</span>b<span class="operator">));
  }</span><span class="keyword">
  inline</span> Type min<span class="operator">(</span>Int a<span class="operator">,</span>Int b<span class="operator">){</span><span class="flow"> return</span><span class="operator">(</span>root<span class="operator">-&gt;</span>min<span class="operator">(</span>a<span class="operator">,</span>b<span class="operator">));
  }
};</span><span class="comment">


// we can add or remove numbers from intervals, and get number of elemens with positive value
</span><span class="keyword">class</span> true_false_tree<span class="operator">{</span><span class="keyword">
public</span><span class="operator">:</span><span class="keyword">
  struct</span> node<span class="operator">{</span>
    Pair Min<span class="operator">;</span><span class="type">
    int</span> Itself<span class="operator">,</span>x<span class="operator">,</span>y<span class="operator">;</span>
    node<span class="operator"> *</span>next<span class="operator">[</span><span class="int">2</span><span class="operator">];</span>
    node<span class="operator">(</span><span class="type">int</span> a<span class="operator">,</span><span class="type">int</span> b<span class="operator">){</span> x<span class="operator">=</span>a<span class="operator">;</span> y<span class="operator">=</span>b<span class="operator">;</span> Itself<span class="operator">=</span><span class="int">0</span><span class="operator">;</span> next<span class="operator">[</span><span class="int">0</span><span class="operator">]=</span>next<span class="operator">[</span><span class="int">1</span><span class="operator">]=</span><span class="int">0</span><span class="operator">;</span> Min<span class="operator">=</span>Pair<span class="operator">(</span>b<span class="operator">-</span>a<span class="operator">+</span><span class="int">1</span><span class="operator">,</span><span class="int">0</span><span class="operator">);
    }</span><span class="type">
    void</span> relax<span class="operator">(){</span><span class="flow">
      if</span><span class="operator"> (!</span>next<span class="operator">[</span><span class="int">0</span><span class="operator">] &amp;&amp; !</span>next<span class="operator">[</span><span class="int">1</span><span class="operator">])</span> Min<span class="operator">=</span>Pair<span class="operator">(</span>y<span class="operator">-</span>x<span class="operator">+</span><span class="int">1</span><span class="operator">,</span>Itself<span class="operator">);</span><span class="flow">
      if</span><span class="operator"> (</span>child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>Min<span class="operator">.</span>second<span class="operator"> ==</span> child<span class="operator">(</span><span class="int">1</span><span class="operator">)-&gt;</span>Min<span class="operator">.</span>second<span class="operator">)</span>
	Min<span class="operator">=</span>Pair<span class="operator">(</span>child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>Min<span class="operator">.</span>first<span class="operator">+</span>child<span class="operator">(</span><span class="int">1</span><span class="operator">)-&gt;</span>Min<span class="operator">.</span>first<span class="operator">,</span>child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>Min<span class="operator">.</span>second<span class="operator">+</span>Itself<span class="operator">);</span><span class="flow">
      if</span><span class="operator"> (</span>child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>Min<span class="operator">.</span>second<span class="operator"> &lt;</span> child<span class="operator">(</span><span class="int">1</span><span class="operator">)-&gt;</span>Min<span class="operator">.</span>second<span class="operator">)</span>
	Min<span class="operator">=</span>Pair<span class="operator">(</span>child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>Min<span class="operator">.</span>first<span class="operator">,</span>child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>Min<span class="operator">.</span>second<span class="operator">+</span>Itself<span class="operator">);</span><span class="flow">
      if</span><span class="operator"> (</span>child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>Min<span class="operator">.</span>second<span class="operator"> &gt;</span> child<span class="operator">(</span><span class="int">1</span><span class="operator">)-&gt;</span>Min<span class="operator">.</span>second<span class="operator">)</span>
	Min<span class="operator">=</span>Pair<span class="operator">(</span>child<span class="operator">(</span><span class="int">1</span><span class="operator">)-&gt;</span>Min<span class="operator">.</span>first<span class="operator">,</span>child<span class="operator">(</span><span class="int">1</span><span class="operator">)-&gt;</span>Min<span class="operator">.</span>second<span class="operator">+</span>Itself<span class="operator">);
    }</span><span class="keyword">
    inline</span> node<span class="operator"> *</span>child<span class="operator">(</span><span class="type">int</span> s<span class="operator">){</span><span class="flow">
      if</span><span class="operator"> (!</span>next<span class="operator">[</span>s<span class="operator">]){</span><span class="flow">
	if</span><span class="operator"> (</span>s<span class="operator">==</span><span class="int">0</span><span class="operator">)</span> next<span class="operator">[</span>s<span class="operator">]=</span><span class="keyword">new</span> node<span class="operator">(</span>x<span class="operator">,(</span>x<span class="operator">+</span>y<span class="operator">)/</span><span class="int">2</span><span class="operator">);</span><span class="flow">
	if</span><span class="operator"> (</span>s<span class="operator">==</span><span class="int">1</span><span class="operator">)</span> next<span class="operator">[</span>s<span class="operator">]=</span><span class="keyword">new</span> node<span class="operator">((</span>x<span class="operator">+</span>y<span class="operator">)/</span><span class="int">2</span><span class="operator">+</span><span class="int">1</span><span class="operator">,</span>y<span class="operator">);
      }</span><span class="flow">
      return</span><span class="operator">(</span>next<span class="operator">[</span>s<span class="operator">]);
    }</span><span class="type">
    void</span> add<span class="operator">(</span><span class="type">int</span> a<span class="operator">,</span><span class="type">int</span> b<span class="operator">,</span><span class="type">int</span> cost<span class="operator">){</span>
      a<span class="operator">=</span>max<span class="operator">(</span>a<span class="operator">,</span>x<span class="operator">);</span> b<span class="operator">=</span>min<span class="operator">(</span>b<span class="operator">,</span>y<span class="operator">);</span><span class="flow">
      if</span><span class="operator"> (</span>a<span class="operator"> &gt;</span> b<span class="operator">)</span><span class="flow"> return</span><span class="operator">;</span><span class="flow">
      if</span><span class="operator"> (</span>a<span class="operator">==</span>x<span class="operator"> &amp;&amp;</span> b<span class="operator">==</span>y<span class="operator">){</span>
	Itself<span class="operator">+=</span>cost<span class="operator">;</span>
	Min<span class="operator">.</span>second<span class="operator">+=</span>cost<span class="operator">;</span><span class="flow">
	return</span><span class="operator">;
      }</span>
      child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>add<span class="operator">(</span>a<span class="operator">,</span>b<span class="operator">,</span>cost<span class="operator">);</span>
      child<span class="operator">(</span><span class="int">1</span><span class="operator">)-&gt;</span>add<span class="operator">(</span>a<span class="operator">,</span>b<span class="operator">,</span>cost<span class="operator">);</span>
      relax<span class="operator">();
    }
  }*</span>root<span class="operator">;</span>
  true_false_tree<span class="operator">(</span><span class="type">int</span> s<span class="operator">){</span> root<span class="operator">=</span><span class="keyword">new</span> node<span class="operator">(</span><span class="int">1</span><span class="operator">,</span>s<span class="operator">);
  }</span><span class="type">
  void</span> add<span class="operator">(</span><span class="type">int</span> a<span class="operator">,</span><span class="type">int</span> b<span class="operator">,</span><span class="type">int</span> cost<span class="operator">){</span> root<span class="operator">-&gt;</span>add<span class="operator">(</span>a<span class="operator">,</span>b<span class="operator">,</span>cost<span class="operator">);
  }</span><span class="keyword">
  inline</span><span class="type"> int</span> sum<span class="operator">(){</span><span class="flow"> if</span><span class="operator"> (</span>root<span class="operator">-&gt;</span>Min<span class="operator">.</span>second<span class="operator"> ==</span><span class="int"> 0</span><span class="operator">)</span><span class="flow"> return</span><span class="operator">(</span>root<span class="operator">-&gt;</span>y<span class="operator">-</span>root<span class="operator">-&gt;</span>Min<span class="operator">.</span>first<span class="operator">);</span><span class="flow"> return</span><span class="operator">(</span>root<span class="operator">-&gt;</span>y<span class="operator">);
  }
};</span><span class="keyword">

class</span> set_sum_tree<span class="operator">{</span><span class="keyword">
public</span><span class="operator">:</span><span class="keyword">
  struct</span> node<span class="operator">{</span><span class="type">
    int</span> a<span class="operator">,</span>b<span class="operator">;</span><span class="type">
    int</span> sum<span class="operator">;</span>
    node<span class="operator"> *</span>next<span class="operator">[</span><span class="int">2</span><span class="operator">];</span>
    node<span class="operator">(</span><span class="type">int</span> a<span class="operator">,</span><span class="type">int</span> b<span class="operator">){</span><span class="keyword">
      this</span><span class="operator">-&gt;</span>a<span class="operator">=</span>a<span class="operator">;</span><span class="keyword">
      this</span><span class="operator">-&gt;</span>b<span class="operator">=</span>b<span class="operator">;</span>
      sum<span class="operator">=</span><span class="int">0</span><span class="operator">;</span>
      next<span class="operator">[</span><span class="int">0</span><span class="operator">]=</span>next<span class="operator">[</span><span class="int">1</span><span class="operator">]=</span><span class="int">0</span><span class="operator">;
    }</span>
    node<span class="operator"> *</span>child<span class="operator">(</span><span class="type">int</span> s<span class="operator">){</span><span class="flow">
      if</span><span class="operator"> (!</span>next<span class="operator">[</span>s<span class="operator">]){</span><span class="flow">
	if</span><span class="operator"> (</span>s<span class="operator"> ==</span><span class="int"> 0</span><span class="operator">)</span>
	  next<span class="operator">[</span>s<span class="operator">]=</span><span class="keyword">new</span> node<span class="operator">(</span>a<span class="operator">,(</span>a<span class="operator">+</span>b<span class="operator">)/</span><span class="int">2</span><span class="operator">);</span><span class="flow">
	else</span>
	  next<span class="operator">[</span>s<span class="operator">]=</span><span class="keyword">new</span> node<span class="operator">((</span>a<span class="operator">+</span>b<span class="operator">)/</span><span class="int">2</span><span class="operator">+</span><span class="int">1</span><span class="operator">,</span>b<span class="operator">);</span><span class="flow">
	if</span><span class="operator"> (</span>sum<span class="operator">)</span>
	  next<span class="operator">[</span>s<span class="operator">]-&gt;</span>sum<span class="operator">=(</span>next<span class="operator">[</span>s<span class="operator">]-&gt;</span>b<span class="operator">-</span>next<span class="operator">[</span>s<span class="operator">]-&gt;</span>a<span class="operator">+</span><span class="int">1</span><span class="operator">)*(</span>sum<span class="operator">/(</span>b<span class="operator">-</span>a<span class="operator">+</span><span class="int">1</span><span class="operator">));
      }</span><span class="flow">
      return</span><span class="operator">(</span>next<span class="operator">[</span>s<span class="operator">]);
    }</span><span class="type">
    void</span> make<span class="operator">(</span><span class="type">int</span> left<span class="operator">,</span><span class="type">int</span> right<span class="operator">,</span><span class="type">int</span> t<span class="operator">){</span>
      left<span class="operator">=</span>max<span class="operator">(</span>left<span class="operator">,</span>a<span class="operator">);</span>
      right<span class="operator">=</span>min<span class="operator">(</span>right<span class="operator">,</span>b<span class="operator">);</span><span class="flow">
      if</span><span class="operator"> (</span>left<span class="operator"> &gt;</span> right<span class="operator">)</span><span class="flow"> return</span><span class="operator">;</span><span class="flow">

      if</span><span class="operator"> (</span>left<span class="operator"> ==</span> a<span class="operator"> &amp;&amp;</span> right<span class="operator"> ==</span> b<span class="operator">){</span>
	sum<span class="operator">=</span>t<span class="operator">*(</span>b<span class="operator">-</span>a<span class="operator">+</span><span class="int">1</span><span class="operator">);</span>
  	next<span class="operator">[</span><span class="int">0</span><span class="operator">]=</span>next<span class="operator">[</span><span class="int">1</span><span class="operator">]=</span><span class="int">0</span><span class="operator">;</span><span class="flow">
	return</span><span class="operator">;
      }</span><span class="flow">else</span><span class="operator">{</span>

	child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>make<span class="operator">(</span>left<span class="operator">,</span>right<span class="operator">,</span>t<span class="operator">);</span>
	child<span class="operator">(</span><span class="int">1</span><span class="operator">)-&gt;</span>make<span class="operator">(</span>left<span class="operator">,</span>right<span class="operator">,</span>t<span class="operator">);</span>
	sum<span class="operator">=</span>next<span class="operator">[</span><span class="int">0</span><span class="operator">]-&gt;</span>sum<span class="operator">+</span>next<span class="operator">[</span><span class="int">1</span><span class="operator">]-&gt;</span>sum<span class="operator">;
      }
    }</span><span class="type">
    int</span> Sum<span class="operator">(</span><span class="type">int</span> left<span class="operator">,</span><span class="type">int</span> right<span class="operator">){</span>
      left<span class="operator">=</span>max<span class="operator">(</span>left<span class="operator">,</span>a<span class="operator">);</span>
      right<span class="operator">=</span>min<span class="operator">(</span>right<span class="operator">,</span>b<span class="operator">);</span><span class="flow">
      if</span><span class="operator"> (</span>left<span class="operator"> &gt;</span> right<span class="operator">)</span><span class="flow"> return</span><span class="operator">(</span><span class="int">0</span><span class="operator">);</span><span class="flow">

      if</span><span class="operator"> (</span>left<span class="operator"> ==</span> a<span class="operator"> &amp;&amp;</span> right<span class="operator"> ==</span> b<span class="operator">)</span><span class="flow"> return</span><span class="operator">(</span>sum<span class="operator">);</span><span class="flow">
      return</span><span class="operator">(</span>child<span class="operator">(</span><span class="int">0</span><span class="operator">)-&gt;</span>Sum<span class="operator">(</span>left<span class="operator">,</span>right<span class="operator">)+</span>child<span class="operator">(</span><span class="int">1</span><span class="operator">)-&gt;</span>Sum<span class="operator">(</span>left<span class="operator">,</span>right<span class="operator">));
    }</span>
    node<span class="operator">(){
    }
  }*</span>root<span class="operator">;</span>
  set_sum_tree<span class="operator">(</span><span class="type">int</span> n<span class="operator">){</span>
    root<span class="operator">=</span><span class="keyword">new</span> node<span class="operator">(</span><span class="int">0</span><span class="operator">,</span>n<span class="operator">+</span><span class="int">1</span><span class="operator">);;
  }</span><span class="type">
  void</span> set<span class="operator">(</span><span class="type">int</span> l<span class="operator">,</span><span class="type">int</span> r<span class="operator">,</span><span class="type">int</span> s<span class="operator">){</span>
    root<span class="operator">-&gt;</span>make<span class="operator">(</span>l<span class="operator">,</span>r<span class="operator">,</span>s<span class="operator">);
  }</span><span class="type">
  int</span> sum<span class="operator">(</span><span class="type">int</span> l<span class="operator">,</span><span class="type">int</span> r<span class="operator">){</span><span class="flow">
    return</span><span class="operator">(</span>root<span class="operator">-&gt;</span>Sum<span class="operator">(</span>l<span class="operator">,</span>r<span class="operator">));
  }
};</span>
</pre>

</body></html>