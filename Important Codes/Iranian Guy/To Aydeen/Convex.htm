<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head>


<meta http-equiv="content-type" content="text/html; charset=utf-8"><title>C++ code colored by C++2HTML</title>

<meta name="generator" content="C++2HTML by Jasper Bedaux"><!-- To generate your own colored code visit http://www.bedaux.net/cpp2html/ -->

<style type="text/css">
.comment { color: #999999; font-style: italic; }
.pre { color: #000099; }
.string { color: #009900; }
.char { color: #009900; }
.float { color: #996600; }
.int { color: #999900; }
.bool { color: #000000; font-weight: bold; }
.type { color: #FF6633; }
.flow { color: #FF0000; }
.keyword { color: #990000; }
.operator { color: #663300; font-weight: bold; }
</style></head><body>
<pre><span class="keyword">const</span><span class="type"> int</span> MAX_N<span class="operator">=</span><span class="int">100</span><span class="operator">+</span><span class="int">20</span><span class="operator">;</span><span class="keyword">
const</span><span class="type"> double</span> EPS<span class="operator">=</span><span class="float">1e-6</span><span class="operator">;</span><span class="keyword">

namespace</span> std<span class="operator">{</span><span class="type">
  bool</span><span class="keyword"> operator</span><span class="operator"> &lt; (</span><span class="keyword">const</span> Point<span class="operator"> &amp;</span>s<span class="operator">,</span><span class="keyword">const</span> Point<span class="operator"> &amp;</span>t<span class="operator">){</span><span class="flow">
    if</span><span class="operator"> (</span>abs<span class="operator">(</span>s<span class="operator">.</span>real<span class="operator">()-</span>t<span class="operator">.</span>real<span class="operator">()) &gt;</span> EPS<span class="operator">)</span><span class="flow"> return</span><span class="operator">(</span>s<span class="operator">.</span>real<span class="operator">() &lt;</span> t<span class="operator">.</span>real<span class="operator">());</span><span class="flow">
    if</span><span class="operator"> (</span>abs<span class="operator">(</span>s<span class="operator">.</span>imag<span class="operator">()-</span>t<span class="operator">.</span>imag<span class="operator">()) &gt;</span> EPS<span class="operator">)</span><span class="flow"> return</span><span class="operator">(</span>s<span class="operator">.</span>imag<span class="operator">() &lt;</span> t<span class="operator">.</span>imag<span class="operator">());</span><span class="flow">
    return</span><span class="operator">(</span><span class="bool">false</span><span class="operator">);
  }
}</span>

Point<span class="operator"> *</span>Num<span class="operator">;</span><span class="keyword">
struct</span> Convex<span class="operator">{</span><span class="type">
  int</span> n<span class="operator">;</span>
  Point num<span class="operator">[</span>MAX_N<span class="operator">];</span>
  Convex<span class="operator">(</span><span class="type">int</span> s<span class="operator">){</span>
    n<span class="operator">=</span>s<span class="operator">;</span>
    fill<span class="operator">(</span>num<span class="operator">,</span>num<span class="operator">+</span>MAX_N<span class="operator">,</span>Point<span class="operator">(</span><span class="int">0</span><span class="operator">,</span><span class="int">0</span><span class="operator">));
  }</span><span class="keyword">
  inline static</span><span class="type"> bool</span> is_left<span class="operator">(</span>Point s<span class="operator">,</span>Point t<span class="operator">){</span><span class="flow"> return</span><span class="operator">(</span>s<span class="operator">.</span>real<span class="operator">()*</span>t<span class="operator">.</span>imag<span class="operator">() &gt;</span> t<span class="operator">.</span>real<span class="operator">()*</span>s<span class="operator">.</span>imag<span class="operator">()+</span>EPS<span class="operator">);
  }</span><span class="keyword">
  inline static</span><span class="type"> bool</span> dif<span class="operator">(</span>Point s<span class="operator">,</span>Point t<span class="operator">){</span>
    s<span class="operator">-=</span>Num<span class="operator">[</span><span class="int">1</span><span class="operator">];</span> t<span class="operator">-=</span>Num<span class="operator">[</span><span class="int">1</span><span class="operator">];</span><span class="flow">
    if</span><span class="operator"> (</span>is_left<span class="operator">(</span>s<span class="operator">,</span>t<span class="operator">))</span><span class="flow"> return</span><span class="operator">(</span><span class="bool">true</span><span class="operator">);</span><span class="flow">
    if</span><span class="operator"> (</span>is_left<span class="operator">(</span>t<span class="operator">,</span>s<span class="operator">))</span><span class="flow"> return</span><span class="operator">(</span><span class="bool">false</span><span class="operator">);</span><span class="flow">
    return</span><span class="operator">(</span>abs<span class="operator">(</span>s<span class="operator">-</span>Num<span class="operator">[</span><span class="int">1</span><span class="operator">]) &lt;</span> abs<span class="operator">(</span>t<span class="operator">-</span>Num<span class="operator">[</span><span class="int">1</span><span class="operator">]));
  }</span><span class="keyword">
  inline static</span><span class="type"> bool</span> online<span class="operator">(</span>Point a<span class="operator">,</span>Point b<span class="operator">,</span>Point c<span class="operator">){</span><span class="flow">
    return</span><span class="operator">(</span>abs<span class="operator">(</span>abs<span class="operator">(</span>a<span class="operator">-</span>c<span class="operator">)-</span>abs<span class="operator">(</span>a<span class="operator">-</span>b<span class="operator">)-</span>abs<span class="operator">(</span>b<span class="operator">-</span>c<span class="operator">)) &lt;</span> EPS<span class="operator">);
  }</span>
  vector<span class="operator">&lt;</span>Point<span class="operator">&gt;</span> ConvexHall<span class="operator">(){</span><span class="flow">
    for</span><span class="operator"> (</span><span class="type">int</span> i<span class="operator">=</span><span class="int">1</span><span class="operator">;</span>i<span class="operator">&lt;=</span>n<span class="operator">;</span>i<span class="operator">++)</span><span class="flow">
      if</span><span class="operator"> (</span>num<span class="operator">[</span>i<span class="operator">] &lt;</span> num<span class="operator">[</span><span class="int">1</span><span class="operator">])</span>
	swap<span class="operator">(</span>num<span class="operator">[</span><span class="int">1</span><span class="operator">],</span>num<span class="operator">[</span>i<span class="operator">]);</span>
    Num<span class="operator">=</span>num<span class="operator">;</span>
    sort<span class="operator">(</span>num<span class="operator">+</span><span class="int">2</span><span class="operator">,</span>num<span class="operator">+</span>n<span class="operator">+</span><span class="int">1</span><span class="operator">,</span>dif<span class="operator">);</span><span class="type">
    int</span> temp<span class="operator">=</span>n<span class="operator">;</span><span class="flow">
    while</span><span class="operator"> (</span>online<span class="operator">(</span>num<span class="operator">[</span>temp<span class="operator">-</span><span class="int">1</span><span class="operator">],</span>num<span class="operator">[</span>temp<span class="operator">],</span>num<span class="operator">[</span><span class="int">1</span><span class="operator">]))</span> temp<span class="operator">--;</span>
    reverse<span class="operator">(</span>num<span class="operator">+</span>temp<span class="operator">,</span>num<span class="operator">+</span>n<span class="operator">+</span><span class="int">1</span><span class="operator">);</span>
    vector<span class="operator">&lt;</span>Point<span class="operator">&gt;</span> ans<span class="operator">;</span>
    ans<span class="operator">.</span>push_back<span class="operator">(</span>num<span class="operator">[</span><span class="int">1</span><span class="operator">]);</span><span class="flow">
    for</span><span class="operator"> (</span><span class="type">int</span> i<span class="operator">=</span><span class="int">2</span><span class="operator">;</span>i<span class="operator">&lt;=</span>n<span class="operator">;</span>i<span class="operator">++){</span><span class="flow">
      while</span><span class="operator"> (</span>ans<span class="operator">.</span>size<span class="operator">() &gt;</span><span class="int"> 1</span><span class="operator"> &amp;&amp;</span> is_left<span class="operator">(</span>num<span class="operator">[</span>i<span class="operator">]-</span>ans<span class="operator">.</span>back<span class="operator">(),</span>ans<span class="operator">[</span>ans<span class="operator">.</span>size<span class="operator">()-</span><span class="int">1</span><span class="operator">]-</span>ans<span class="operator">[</span>ans<span class="operator">.</span>size<span class="operator">()-</span><span class="int">2</span><span class="operator">]))</span> ans<span class="operator">.</span>pop_back<span class="operator">();</span>
      ans<span class="operator">.</span>push_back<span class="operator">(</span>num<span class="operator">[</span>i<span class="operator">]);	     
    }</span><span class="flow"> 
    return</span><span class="operator">(</span>ans<span class="operator">);
  }
};</span>
</pre>

</body></html>