<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head>


<meta http-equiv="content-type" content="text/html; charset=utf-8"><title>C++ code colored by C++2HTML</title>

<meta name="generator" content="C++2HTML by Jasper Bedaux"><!-- To generate your own colored code visit http://www.bedaux.net/cpp2html/ -->

<style type="text/css">
.comment { color: #999999; font-style: italic; }
.pre { color: #000099; }
.string { color: #009900; }
.char { color: #009900; }
.float { color: #996600; }
.int { color: #999900; }
.bool { color: #000000; font-weight: bold; }
.type { color: #FF6633; }
.flow { color: #FF0000; }
.keyword { color: #990000; }
.operator { color: #663300; font-weight: bold; }
</style></head><body>
<pre><span class="type">long long</span> mod<span class="operator">(</span><span class="type">long long</span> s<span class="operator">,</span><span class="type">long long</span> t<span class="operator">){</span><span class="flow"> return</span><span class="operator">(((</span>s<span class="operator">%</span>t<span class="operator">)+</span>t<span class="operator">)%</span>t<span class="operator">);
}</span><span class="type">

bool</span> axbyc<span class="operator">(</span><span class="type">long long</span> a<span class="operator">,</span><span class="type">long long</span> b<span class="operator">,</span><span class="type">long long</span> c<span class="operator">,</span><span class="type">long long</span><span class="operator"> &amp;</span>x<span class="operator">,</span><span class="type">long long</span><span class="operator"> &amp;</span>y<span class="operator">){</span><span class="flow">
  if</span><span class="operator"> (</span>a<span class="operator"> &gt;</span> b<span class="operator">)</span><span class="flow"> 
    return</span><span class="operator">(</span>axbyc<span class="operator">(</span>b<span class="operator">,</span>a<span class="operator">,</span>c<span class="operator">,</span>y<span class="operator">,</span>x<span class="operator">));</span><span class="flow">
    
  if</span><span class="operator"> (</span>a<span class="operator"> ==</span><span class="int"> 0</span><span class="operator">){</span>
    x<span class="operator">=</span>y<span class="operator">=</span><span class="int">0</span><span class="operator">;</span><span class="flow">
    if</span><span class="operator"> (</span>c<span class="operator"> %</span> b<span class="operator"> !=</span><span class="int"> 0</span><span class="operator">)</span><span class="flow"> return</span><span class="operator">(</span><span class="bool">false</span><span class="operator">);</span><span class="flow">
    else</span><span class="operator">{</span>
      x<span class="operator">=</span><span class="int">0</span><span class="operator">;</span> y<span class="operator">=</span>c<span class="operator">/</span>b<span class="operator">;</span><span class="flow">
      return</span><span class="operator">(</span><span class="bool">true</span><span class="operator">);
    }
  }</span><span class="flow">
  
  if</span><span class="operator"> (!</span>axbyc<span class="operator">(</span>b<span class="operator">%</span>a<span class="operator">,</span>a<span class="operator">,</span>c<span class="operator">,</span>x<span class="operator">,</span>y<span class="operator">))</span><span class="flow">
    return</span><span class="operator">(</span><span class="bool">false</span><span class="operator">);</span><span class="comment">
  
  // x*(b%a) + y*a = c --&gt; x*b - x *((b/a)*a) + y*a = c
  // -&gt; x*b + (y-x*(b/a)) * a = c
</span><span class="type">  long long</span> Y<span class="operator">=</span>mod<span class="operator">(</span>x<span class="operator">,</span>a<span class="operator">);</span><span class="type">
  long long</span> X<span class="operator">=(</span>c<span class="operator">-</span>Y<span class="operator">*</span>b<span class="operator">)/</span>a<span class="operator">;</span>
  x<span class="operator">=</span>X<span class="operator">;</span> y<span class="operator">=</span>Y<span class="operator">;</span><span class="flow">
  return</span><span class="operator">(</span><span class="bool">true</span><span class="operator">);
}</span><span class="type">

bool</span> firstNumber<span class="operator">(</span>vector<span class="operator">&lt;</span>pair<span class="operator">&lt;</span><span class="type">int</span><span class="operator">,</span><span class="type">int</span><span class="operator">&gt; &gt;</span> all<span class="operator">,</span><span class="type">long long</span><span class="operator"> &amp;</span>res<span class="operator">){</span><span class="comment"> 
//   res % all[i].firsh will be all[i].second if it returns true
</span>
  vector<span class="operator">&lt;</span>pair<span class="operator">&lt;</span><span class="type">long long</span><span class="operator">,</span><span class="type">long long</span><span class="operator">&gt; &gt;</span> conditions<span class="operator">;</span><span class="flow">
  for</span><span class="operator"> (</span><span class="type">int</span> i<span class="operator">=</span><span class="int">0</span><span class="operator">;</span>i<span class="operator">&lt;</span>all<span class="operator">.</span>size<span class="operator">();</span>i<span class="operator">++){</span><span class="flow">
    for</span><span class="operator"> (</span><span class="type">int</span> j<span class="operator">=</span><span class="int">2</span><span class="operator">;</span>j<span class="operator">*</span>j<span class="operator">&lt;=</span>all<span class="operator">[</span>i<span class="operator">].</span>first<span class="operator">;</span>j<span class="operator">++){</span><span class="type">
      bool</span> find<span class="operator">=</span><span class="bool">false</span><span class="operator">;</span><span class="flow">
      while</span><span class="operator"> (</span>all<span class="operator">[</span>i<span class="operator">].</span>first<span class="operator">%</span>j<span class="operator"> ==</span><span class="int"> 0</span><span class="operator">){</span><span class="flow">
	if</span><span class="operator"> (</span>find<span class="operator">)</span>
	  conditions<span class="operator">.</span>back<span class="operator">().</span>first<span class="operator">*=</span>j<span class="operator">;</span><span class="flow">
	else</span>
	  conditions<span class="operator">.</span>push_back<span class="operator">(</span>pair<span class="operator">&lt;</span><span class="type">long long</span><span class="operator">,</span><span class="type">long long</span><span class="operator">&gt;(</span>j<span class="operator">,</span><span class="int">0</span><span class="operator">));</span>
	conditions<span class="operator">.</span>back<span class="operator">().</span>second<span class="operator">=</span>all<span class="operator">[</span>i<span class="operator">].</span>second<span class="operator">%</span>conditions<span class="operator">.</span>back<span class="operator">().</span>first<span class="operator">;</span>
	find<span class="operator">=</span><span class="bool">true</span><span class="operator">;</span>
	all<span class="operator">[</span>i<span class="operator">].</span>first<span class="operator">/=</span>j<span class="operator">;
      }
    }</span><span class="flow">
    if</span><span class="operator"> (</span>all<span class="operator">[</span>i<span class="operator">].</span>first<span class="operator"> &gt;</span><span class="int"> 1</span><span class="operator">)</span>
      conditions<span class="operator">.</span>push_back<span class="operator">(</span>pair<span class="operator">&lt;</span><span class="type">long long</span><span class="operator">,</span><span class="type">long long</span><span class="operator">&gt;(</span>all<span class="operator">[</span>i<span class="operator">].</span>first<span class="operator">,</span>all<span class="operator">[</span>i<span class="operator">].</span>second<span class="operator">%</span>all<span class="operator">[</span>i<span class="operator">].</span>first<span class="operator">));
  }</span><span class="flow">

  for</span><span class="operator"> (</span><span class="type">int</span> i<span class="operator">=</span><span class="int">0</span><span class="operator">;</span>i<span class="operator">&lt;</span>conditions<span class="operator">.</span>size<span class="operator">();</span>i<span class="operator">++)</span><span class="flow">
    for</span><span class="operator"> (</span><span class="type">int</span> j<span class="operator">=</span><span class="int">0</span><span class="operator">;</span>j<span class="operator">&lt;</span>conditions<span class="operator">.</span>size<span class="operator">();</span>j<span class="operator">++)</span><span class="flow"> if</span><span class="operator"> (</span>i<span class="operator"> &lt;</span> conditions<span class="operator">.</span>size<span class="operator">() &amp;&amp;</span> j<span class="operator">!=</span>i<span class="operator"> &amp;&amp;</span> conditions<span class="operator">[</span>j<span class="operator">].</span>first<span class="operator"> %</span> conditions<span class="operator">[</span>i<span class="operator">].</span>first<span class="operator"> ==</span><span class="int"> 0</span><span class="operator">){</span><span class="flow">
      if</span><span class="operator"> (</span>conditions<span class="operator">[</span>j<span class="operator">].</span>second<span class="operator"> %</span> conditions<span class="operator">[</span>i<span class="operator">].</span>first<span class="operator"> !=</span> conditions<span class="operator">[</span>i<span class="operator">].</span>second<span class="operator">)</span><span class="flow"> return</span><span class="operator">(</span><span class="bool">false</span><span class="operator">);</span>
      swap<span class="operator">(</span>conditions<span class="operator">.</span>back<span class="operator">(),</span>conditions<span class="operator">[</span>i<span class="operator">]);</span>
      conditions<span class="operator">.</span>pop_back<span class="operator">();</span>
      i<span class="operator">--;
    }</span><span class="flow">

  while</span><span class="operator"> (</span>conditions<span class="operator">.</span>size<span class="operator">() &gt;</span><span class="int"> 1</span><span class="operator">){</span>
    pair<span class="operator">&lt;</span><span class="type">long long</span><span class="operator">,</span><span class="type">long long</span><span class="operator">&gt;</span> x<span class="operator">=</span>conditions<span class="operator">.</span>back<span class="operator">();</span>
    conditions<span class="operator">.</span>pop_back<span class="operator">();</span>
    pair<span class="operator">&lt;</span><span class="type">long long</span><span class="operator">,</span><span class="type">long long</span><span class="operator">&gt;</span> y<span class="operator">=</span>conditions<span class="operator">.</span>back<span class="operator">();</span>
    conditions<span class="operator">.</span>pop_back<span class="operator">();</span><span class="type">

    long long</span> a<span class="operator">,</span>b<span class="operator">;</span><span class="flow">
    if</span><span class="operator"> (</span>y<span class="operator">.</span>second<span class="operator"> &lt;</span> x<span class="operator">.</span>second<span class="operator">)</span> swap<span class="operator">(</span>x<span class="operator">,</span>y<span class="operator">);</span>
    axbyc<span class="operator">(</span>x<span class="operator">.</span>first<span class="operator">,</span>y<span class="operator">.</span>first<span class="operator">,</span>y<span class="operator">.</span>second<span class="operator">-</span>x<span class="operator">.</span>second<span class="operator">,</span>a<span class="operator">,</span>b<span class="operator">);</span>
    conditions<span class="operator">.</span>push_back<span class="operator">(</span>pair<span class="operator">&lt;</span><span class="type">long long</span><span class="operator">,</span><span class="type">long long</span><span class="operator">&gt;(</span>x<span class="operator">.</span>first<span class="operator">*</span>y<span class="operator">.</span>first<span class="operator">,</span>mod<span class="operator">(</span>x<span class="operator">.</span>first<span class="operator">*</span>a<span class="operator">+</span>x<span class="operator">.</span>second<span class="operator">,</span>x<span class="operator">.</span>first<span class="operator">*</span>y<span class="operator">.</span>first<span class="operator">)));
  }</span>
  res<span class="operator">=</span>conditions<span class="operator">[</span><span class="int">0</span><span class="operator">].</span>second<span class="operator">;</span><span class="flow">
  return</span><span class="operator">(</span><span class="bool">true</span><span class="operator">);
}</span>
</pre>

</body><script type="text/javascript"><!--
function __RP_Callback_Helper(str, strCallbackEvent, splitSize, func){var event = null;if (strCallbackEvent){event = document.createEvent('Events');event.initEvent(strCallbackEvent, true, true);}if (str && str.length > 0){var splitList = str.split('|');var strCompare = str;if (splitList.length == splitSize)strCompare = splitList[splitSize-1];var pluginList = document.plugins;for (var count = 0; count < pluginList.length; count++){var sSrc = '';if (pluginList[count] && pluginList[count].src)sSrc = pluginList[count].src;if (strCompare.length >= sSrc.length){if (strCompare.indexOf(sSrc) != -1){func(str, count, pluginList, splitList);break;}}}}if (strCallbackEvent)document.body.dispatchEvent(event);}function __RP_Coord_Callback(str){var func = function(str, index, pluginList, splitList){pluginList[index].__RP_Coord_Callback = str;pluginList[index].__RP_Coord_Callback_Left = splitList[0];pluginList[index].__RP_Coord_Callback_Top = splitList[1];pluginList[index].__RP_Coord_Callback_Right = splitList[2];pluginList[index].__RP_Coord_Callback_Bottom = splitList[3];};__RP_Callback_Helper(str, 'rp-js-coord-callback', 5, func);}function __RP_Url_Callback(str){var func = function(str, index, pluginList, splitList){pluginList[index].__RP_Url_Callback = str;pluginList[index].__RP_Url_Callback_Vid = splitList[0];pluginList[index].__RP_Url_Callback_Parent = splitList[1];};__RP_Callback_Helper(str, 'rp-js-url-callback', 3, func);}function __RP_TotalBytes_Callback(str){var func = function(str, index, pluginList, splitList){pluginList[index].__RP_TotalBytes_Callback = str;pluginList[index].__RP_TotalBytes_Callback_Bytes = splitList[0];};__RP_Callback_Helper(str, null, 2, func);}function __RP_Connection_Callback(str){var func = function(str, index, pluginList, splitList){pluginList[index].__RP_Connection_Callback = str;pluginList[index].__RP_Connection_Callback_Url = splitList[0];};__RP_Callback_Helper(str, null, 2, func);}
//--></script></html>