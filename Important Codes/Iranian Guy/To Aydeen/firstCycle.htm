<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head>


<meta http-equiv="content-type" content="text/html; charset=utf-8"><title>C++ code colored by C++2HTML</title>

<meta name="generator" content="C++2HTML by Jasper Bedaux"><!-- To generate your own colored code visit http://www.bedaux.net/cpp2html/ -->

<style type="text/css">
.comment { color: #999999; font-style: italic; }
.pre { color: #000099; }
.string { color: #009900; }
.char { color: #009900; }
.float { color: #996600; }
.int { color: #999900; }
.bool { color: #000000; font-weight: bold; }
.type { color: #FF6633; }
.flow { color: #FF0000; }
.keyword { color: #990000; }
.operator { color: #663300; font-weight: bold; }
</style></head><body>
<pre>string firstCycle<span class="operator">(</span>string s<span class="operator">){</span>
  vector<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> Glo<span class="operator">;</span>
  vector<span class="operator">&lt;</span><span class="type">bool</span><span class="operator">&gt;</span> mark<span class="operator">(</span>s<span class="operator">.</span>size<span class="operator">(),</span><span class="bool">true</span><span class="operator">);</span><span class="flow">
  for</span><span class="operator"> (</span><span class="type">int</span> i<span class="operator">=</span><span class="int">0</span><span class="operator">;</span>i<span class="operator">&lt;</span>s<span class="operator">.</span>size<span class="operator">();</span>i<span class="operator">++)</span> Glo<span class="operator">.</span>push_back<span class="operator">(</span>i<span class="operator">);</span><span class="flow">
  for</span><span class="operator"> (</span><span class="type">int</span> i<span class="operator">=</span><span class="int">0</span><span class="operator">;</span>i<span class="operator">&lt;</span>s<span class="operator">.</span>size<span class="operator">();</span>i<span class="operator">++){</span><span class="type">
    char</span> Min<span class="operator">=</span>s<span class="operator">[(</span>Glo<span class="operator">[</span><span class="int">0</span><span class="operator">]+</span>i<span class="operator">)%</span>s<span class="operator">.</span>size<span class="operator">()];</span><span class="flow">
    for</span><span class="operator"> (</span><span class="type">int</span> j<span class="operator">=</span><span class="int">0</span><span class="operator">;</span>j<span class="operator">&lt;</span>Glo<span class="operator">.</span>size<span class="operator">();</span>j<span class="operator">++)</span>
      Min<span class="operator">=</span>min<span class="operator">(</span>Min<span class="operator">,</span>s<span class="operator">[(</span>Glo<span class="operator">[</span>j<span class="operator">]+</span>i<span class="operator">)%</span>s<span class="operator">.</span>size<span class="operator">()]);</span><span class="flow">

    for</span><span class="operator"> (</span><span class="type">int</span> j<span class="operator">=</span><span class="int">0</span><span class="operator">;</span>j<span class="operator">&lt;</span>Glo<span class="operator">.</span>size<span class="operator">();</span>j<span class="operator">++)</span><span class="flow">
      if</span><span class="operator"> (</span>s<span class="operator">[(</span>Glo<span class="operator">[</span>j<span class="operator">]+</span>i<span class="operator">)%</span>s<span class="operator">.</span>size<span class="operator">()] !=</span> Min<span class="operator">)</span> mark<span class="operator">[</span>Glo<span class="operator">[</span>j<span class="operator">]]=</span><span class="bool">false</span><span class="operator">;</span><span class="flow">
    
    for</span><span class="operator"> (</span><span class="type">int</span> j<span class="operator">=</span><span class="int">0</span><span class="operator">;</span>j<span class="operator">&lt;</span>Glo<span class="operator">.</span>size<span class="operator">();</span>j<span class="operator">++)</span><span class="flow"> if</span><span class="operator"> (</span>mark<span class="operator">[</span>Glo<span class="operator">[</span>j<span class="operator">]])</span>
      mark<span class="operator">[(</span>Glo<span class="operator">[</span>j<span class="operator">]+</span>i<span class="operator">+</span><span class="int">1</span><span class="operator">)%</span>s<span class="operator">.</span>size<span class="operator">()]=</span><span class="bool">false</span><span class="operator">;</span><span class="flow">
    for</span><span class="operator"> (</span><span class="type">int</span> j<span class="operator">=</span><span class="int">0</span><span class="operator">;</span>j<span class="operator">&lt;</span>Glo<span class="operator">.</span>size<span class="operator">();</span>j<span class="operator">++)</span><span class="flow">
      if</span><span class="operator"> (!</span>mark<span class="operator">[</span>Glo<span class="operator">[</span>j<span class="operator">]]){</span>
	swap<span class="operator">(</span>Glo<span class="operator">.</span>back<span class="operator">(),</span>Glo<span class="operator">[</span>j<span class="operator">]);</span>
	Glo<span class="operator">.</span>pop_back<span class="operator">();</span>
	j<span class="operator">--;
      }
  }</span><span class="flow">
  return</span><span class="operator">(</span>s<span class="operator">.</span>substr<span class="operator">(</span>Glo<span class="operator">[</span><span class="int">0</span><span class="operator">])+</span>s<span class="operator">.</span>substr<span class="operator">(</span><span class="int">0</span><span class="operator">,</span>Glo<span class="operator">[</span><span class="int">0</span><span class="operator">]));
}</span>
</pre>

</body></html>