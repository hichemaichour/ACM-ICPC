<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head>


<meta http-equiv="content-type" content="text/html; charset=utf-8"><title>C++ code colored by C++2HTML</title>

<meta name="generator" content="C++2HTML by Jasper Bedaux"><!-- To generate your own colored code visit http://www.bedaux.net/cpp2html/ -->

<style type="text/css">
.comment { color: #999999; font-style: italic; }
.pre { color: #000099; }
.string { color: #009900; }
.char { color: #009900; }
.float { color: #996600; }
.int { color: #999900; }
.bool { color: #000000; font-weight: bold; }
.type { color: #FF6633; }
.flow { color: #FF0000; }
.keyword { color: #990000; }
.operator { color: #663300; font-weight: bold; }
</style></head><body>
<pre><span class="keyword">typedef</span> complex<span class="operator">&lt;</span><span class="type">double</span><span class="operator">&gt;</span> Point<span class="operator">;</span><span class="keyword">
typedef</span> pair<span class="operator">&lt;</span><span class="type">int</span><span class="operator">,</span><span class="type">int</span><span class="operator">&gt;</span> Pair<span class="operator">;</span><span class="keyword">

const</span><span class="type"> int</span> MAX_N<span class="operator">=</span><span class="int">100000</span><span class="operator">+</span><span class="int">20</span><span class="operator">;</span><span class="keyword">
const</span><span class="type"> double</span> EPS<span class="operator">=</span><span class="float">1e-6</span><span class="operator">;</span><span class="keyword">
const</span> Point Change<span class="operator">(</span><span class="float">1.434</span><span class="operator">,</span><span class="float">2.4353</span><span class="operator">);</span>

Point<span class="operator"> *</span>Coor<span class="operator">;</span><span class="keyword">
struct</span> DCEL<span class="operator">{</span>
  Point coor<span class="operator">[</span>MAX_N<span class="operator">];</span><span class="type">
  int</span> n<span class="operator">;</span>
  vector<span class="operator">&lt;</span>Pair<span class="operator">&gt;</span> e<span class="operator">;</span>
  vector<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;</span> next<span class="operator">,</span>part<span class="operator">;</span>
  DCEL<span class="operator">(</span><span class="type">int</span> s<span class="operator">){</span>
    n<span class="operator">=</span>s<span class="operator">;</span> e<span class="operator">.</span>clear<span class="operator">();</span> next<span class="operator">.</span>clear<span class="operator">();</span> part<span class="operator">.</span>clear<span class="operator">();</span>
    fill<span class="operator">(</span>coor<span class="operator">,</span>coor<span class="operator">+</span>MAX_N<span class="operator">,</span>Point<span class="operator">(</span><span class="int">0</span><span class="operator">,</span><span class="int">0</span><span class="operator">));
  }</span><span class="keyword">
  inline</span><span class="type"> void</span> push_back<span class="operator">(</span><span class="type">int</span> a<span class="operator">,</span><span class="type">int</span> b<span class="operator">){</span>
    e<span class="operator">.</span>push_back<span class="operator">(</span>Pair<span class="operator">(</span>a<span class="operator">,</span>b<span class="operator">));</span> 
    e<span class="operator">.</span>push_back<span class="operator">(</span>Pair<span class="operator">(</span>b<span class="operator">,</span>a<span class="operator">));
  }</span><span class="keyword">
  
  inline static</span><span class="type"> bool</span> dif<span class="operator">(</span>Pair s<span class="operator">,</span>Pair t<span class="operator">){</span><span class="type">
    double</span> a<span class="operator">=</span>arg<span class="operator">((</span>Coor<span class="operator">[</span>s<span class="operator">.</span>second<span class="operator">]-</span>Coor<span class="operator">[</span>s<span class="operator">.</span>first<span class="operator">])*</span>Change<span class="operator">),</span>b<span class="operator">=</span>arg<span class="operator">((</span>Coor<span class="operator">[</span>t<span class="operator">.</span>second<span class="operator">]-</span>Coor<span class="operator">[</span>t<span class="operator">.</span>first<span class="operator">])*</span>Change<span class="operator">);</span><span class="flow">
    if</span><span class="operator"> (</span>abs<span class="operator">(</span>a<span class="operator">-</span>b<span class="operator">) &gt;</span> EPS<span class="operator">)</span><span class="flow"> return</span><span class="operator">(</span>a<span class="operator"> &lt;</span> b<span class="operator">);</span><span class="flow">
    else return</span><span class="operator">(</span>s<span class="operator"> &lt;</span> t<span class="operator">);
  }</span><span class="keyword">
  
  inline</span><span class="type"> void</span> relax<span class="operator">(){</span>
    Coor<span class="operator">=</span>coor<span class="operator">;</span>
    sort<span class="operator">(</span>e<span class="operator">.</span>begin<span class="operator">(),</span>e<span class="operator">.</span>end<span class="operator">(),</span>dif<span class="operator">);</span>
    e<span class="operator">.</span>resize<span class="operator">(</span>unique<span class="operator">(</span>e<span class="operator">.</span>begin<span class="operator">(),</span>e<span class="operator">.</span>end<span class="operator">())-</span>e<span class="operator">.</span>begin<span class="operator">());</span>
    map<span class="operator">&lt;</span>Pair<span class="operator">,</span><span class="type">int</span><span class="operator">&gt;</span> where<span class="operator">;</span><span class="flow">
    for</span><span class="operator"> (</span><span class="type">int</span> i<span class="operator">=</span><span class="int">0</span><span class="operator">;</span>i<span class="operator">&lt;</span>e<span class="operator">.</span>size<span class="operator">();</span>i<span class="operator">++)</span> where<span class="operator">[</span>e<span class="operator">[</span>i<span class="operator">]]=</span>i<span class="operator">;</span><span class="flow">
    for</span><span class="operator"> (</span><span class="type">int</span> i<span class="operator">=</span><span class="int">0</span><span class="operator">;</span>i<span class="operator">&lt;</span>e<span class="operator">.</span>size<span class="operator">();</span>i<span class="operator">++)</span> part<span class="operator">.</span>push_back<span class="operator">(</span>where<span class="operator">[</span>Pair<span class="operator">(</span>e<span class="operator">[</span>i<span class="operator">].</span>second<span class="operator">,</span>e<span class="operator">[</span>i<span class="operator">].</span>first<span class="operator">)]);</span><span class="type">
    int</span> temp<span class="operator">[</span>MAX_N<span class="operator">];</span> fill<span class="operator">(</span>temp<span class="operator">+</span><span class="int">1</span><span class="operator">,</span>temp<span class="operator">+</span>n<span class="operator">+</span><span class="int">1</span><span class="operator">,-</span><span class="int">1</span><span class="operator">);</span><span class="flow">

    for</span><span class="operator"> (</span><span class="type">int</span> i<span class="operator">=</span><span class="int">0</span><span class="operator">;</span>i<span class="operator">&lt;</span>e<span class="operator">.</span>size<span class="operator">();</span>i<span class="operator">++){</span> next<span class="operator">.</span>push_back<span class="operator">(</span>temp<span class="operator">[</span>e<span class="operator">[</span>i<span class="operator">].</span>first<span class="operator">]);</span> temp<span class="operator">[</span>e<span class="operator">[</span>i<span class="operator">].</span>first<span class="operator">]=</span>i<span class="operator">;
    }</span><span class="flow">
    for</span><span class="operator"> (</span><span class="type">int</span> i<span class="operator">=</span><span class="int">0</span><span class="operator">;</span>i<span class="operator">&lt;</span>e<span class="operator">.</span>size<span class="operator">();</span>i<span class="operator">++)</span><span class="flow"> if</span><span class="operator"> (</span>next<span class="operator">[</span>i<span class="operator">]==-</span><span class="int">1</span><span class="operator">)</span> next<span class="operator">[</span>i<span class="operator">]=</span>temp<span class="operator">[</span>e<span class="operator">[</span>i<span class="operator">].</span>first<span class="operator">];
  }</span><span class="keyword">
  inline</span> vector<span class="operator">&lt;</span>vector<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt; &gt;</span> Faces<span class="operator">(){</span>
    vector<span class="operator">&lt;</span>vector<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt; &gt;</span> ans<span class="operator">;</span>
    vector<span class="operator">&lt;</span><span class="type">bool</span><span class="operator">&gt;</span> mark<span class="operator">;</span>
    relax<span class="operator">();</span>
    mark<span class="operator">.</span>resize<span class="operator">(</span>e<span class="operator">.</span>size<span class="operator">());</span><span class="flow">
    for</span><span class="operator"> (</span><span class="type">int</span> i<span class="operator">=</span><span class="int">0</span><span class="operator">;</span>i<span class="operator">&lt;</span>e<span class="operator">.</span>size<span class="operator">();</span>i<span class="operator">++)</span><span class="flow"> if</span><span class="operator"> (!</span>mark<span class="operator">[</span>i<span class="operator">]){</span>
      ans<span class="operator">.</span>push_back<span class="operator">(</span>vector<span class="operator">&lt;</span><span class="type">int</span><span class="operator">&gt;());</span><span class="type">
      int</span> temp<span class="operator">=</span>i<span class="operator">;</span><span class="flow">
      while</span><span class="operator"> (!</span>mark<span class="operator">[</span>temp<span class="operator">]){</span>
	mark<span class="operator">[</span>temp<span class="operator">]=</span><span class="bool">true</span><span class="operator">;</span>
	ans<span class="operator">.</span>back<span class="operator">().</span>push_back<span class="operator">(</span>e<span class="operator">[</span>temp<span class="operator">].</span>first<span class="operator">);</span>
	temp<span class="operator">=</span>next<span class="operator">[</span>part<span class="operator">[</span>temp<span class="operator">]];
      }
    }</span><span class="flow">
    return</span><span class="operator">(</span>ans<span class="operator">);
  }
};</span>
</pre>

</body></html>