<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en"><head>


<meta http-equiv="content-type" content="text/html; charset=utf-8"><title>C++ code colored by C++2HTML</title>

<meta name="generator" content="C++2HTML by Jasper Bedaux"><!-- To generate your own colored code visit http://www.bedaux.net/cpp2html/ -->

<style type="text/css">
.comment { color: #999999; font-style: italic; }
.pre { color: #000099; }
.string { color: #009900; }
.char { color: #009900; }
.float { color: #996600; }
.int { color: #999900; }
.bool { color: #000000; font-weight: bold; }
.type { color: #FF6633; }
.flow { color: #FF0000; }
.keyword { color: #990000; }
.operator { color: #663300; font-weight: bold; }
</style></head><body>
<pre><span class="keyword">struct</span> Point<span class="operator">{</span><span class="type">
  double</span> x<span class="operator">,</span>y<span class="operator">,</span>z<span class="operator">;</span>
  Point<span class="operator"> (</span><span class="type">double</span> a<span class="operator">=</span><span class="int">0</span><span class="operator">,</span><span class="type">double</span> b<span class="operator">=</span><span class="int">0</span><span class="operator">,</span><span class="type">double</span> c<span class="operator">=</span><span class="int">0</span><span class="operator">){</span> x<span class="operator">=</span>a<span class="operator">;</span> y<span class="operator">=</span>b<span class="operator">;</span> z<span class="operator">=</span>c<span class="operator">;
  }</span>
  Point<span class="keyword"> operator</span><span class="operator"> + (</span>Point s<span class="operator">){</span><span class="flow"> return</span><span class="operator">(</span>Point<span class="operator">(</span>x<span class="operator">+</span>s<span class="operator">.</span>x<span class="operator">,</span>y<span class="operator">+</span>s<span class="operator">.</span>y<span class="operator">,</span>z<span class="operator">+</span>s<span class="operator">.</span>z<span class="operator">));
  }</span>
  Point<span class="keyword"> operator</span><span class="operator"> - (</span>Point s<span class="operator">){</span><span class="flow"> return</span><span class="operator">(</span>Point<span class="operator">(</span>x<span class="operator">-</span>s<span class="operator">.</span>x<span class="operator">,</span>y<span class="operator">-</span>s<span class="operator">.</span>y<span class="operator">,</span>z<span class="operator">-</span>s<span class="operator">.</span>z<span class="operator">));
  }</span><span class="type">
  void</span><span class="keyword"> operator</span><span class="operator"> += (</span>Point s<span class="operator">){ *</span><span class="keyword">this</span><span class="operator">=*</span><span class="keyword">this</span><span class="operator">+</span>s<span class="operator">;
  }</span><span class="type">
  void</span><span class="keyword"> operator</span><span class="operator"> -= (</span>Point s<span class="operator">){ *</span><span class="keyword">this</span><span class="operator">=*</span><span class="keyword">this</span><span class="operator">-</span>s<span class="operator">;
  }</span><span class="type">
  double</span> Dot<span class="operator">(</span>Point s<span class="operator">){</span><span class="flow"> return</span><span class="operator">(</span>x<span class="operator">*</span>s<span class="operator">.</span>x<span class="operator"> +</span>y<span class="operator">*</span>s<span class="operator">.</span>y<span class="operator"> +</span>z<span class="operator">*</span>s<span class="operator">.</span>z<span class="operator">);
  }</span><span class="type">
  double</span> Cross<span class="operator">(</span>Point s<span class="operator">){</span><span class="flow"> return</span><span class="operator">(</span>x<span class="operator">*</span>s<span class="operator">.</span>x<span class="operator"> +</span> y<span class="operator">*</span>s<span class="operator">.</span>y<span class="operator"> +</span> z<span class="operator">*</span>s<span class="operator">.</span>z<span class="operator">);
  }</span>
  Point<span class="keyword"> operator</span><span class="operator"> * (</span><span class="type">double</span> s<span class="operator">){</span><span class="flow"> return</span><span class="operator">(</span>Point<span class="operator">(</span>x<span class="operator">*</span>s<span class="operator">,</span>y<span class="operator">*</span>s<span class="operator">,</span>z<span class="operator">*</span>s<span class="operator">));
  }</span>
  Point<span class="keyword"> operator</span><span class="operator"> / (</span><span class="type">double</span> s<span class="operator">){</span><span class="flow"> return</span><span class="operator">(</span>Point<span class="operator">(</span>x<span class="operator">/</span>s<span class="operator">,</span>y<span class="operator">/</span>s<span class="operator">,</span>z<span class="operator">/</span>s<span class="operator">));
  }</span><span class="keyword">
  inline friend</span> ostream<span class="operator"> &amp;</span><span class="keyword"> operator</span><span class="operator"> &lt;&lt; (</span>ostream<span class="operator"> &amp;</span> tout<span class="operator">,</span> Point s<span class="operator">){</span><span class="flow">
    return</span><span class="operator">(</span>tout<span class="operator">&lt;&lt;</span><span class="char">'('</span><span class="operator">&lt;&lt;</span>s<span class="operator">.</span>x<span class="operator">&lt;&lt;</span><span class="char">','</span><span class="operator">&lt;&lt;</span>s<span class="operator">.</span>y<span class="operator">&lt;&lt;</span><span class="char">','</span><span class="operator">&lt;&lt;</span>s<span class="operator">.</span>z<span class="operator">&lt;&lt;</span><span class="char">')'</span><span class="operator">);
  }
};</span><span class="keyword">

struct</span> Line<span class="operator">{</span>
  Point A<span class="operator">,</span>B<span class="operator">;</span>
  Line<span class="operator"> (</span>Point a<span class="operator">,</span>Point b<span class="operator">){</span> A<span class="operator">=</span>a<span class="operator">;</span> B<span class="operator">=</span>b<span class="operator">;
  }
};</span><span class="keyword">

inline</span><span class="type"> double</span> abs<span class="operator">(</span>Point s<span class="operator">){</span><span class="flow"> return</span><span class="operator">(</span>sqrt<span class="operator">(</span>pow<span class="operator">(</span>s<span class="operator">.</span>x<span class="operator">,</span><span class="int">2</span><span class="operator">)+</span>pow<span class="operator">(</span>s<span class="operator">.</span>y<span class="operator">,</span><span class="int">2</span><span class="operator">)+</span>pow<span class="operator">(</span>s<span class="operator">.</span>z<span class="operator">,</span><span class="int">2</span><span class="operator">)));
}</span><span class="keyword">

struct</span> Plane<span class="operator">{</span>
  Point Vector<span class="operator">,</span>one<span class="operator">;</span><span class="keyword">
  inline</span> Point RandomPoint<span class="operator">(){</span>
    Point A<span class="operator">(</span>rand<span class="operator">()%</span><span class="int">100</span><span class="operator">,</span>rand<span class="operator">()%</span><span class="int">100</span><span class="operator">,</span>rand<span class="operator">()%</span><span class="int">100</span><span class="operator">),</span>B<span class="operator">(</span>rand<span class="operator">()%</span><span class="int">100</span><span class="operator">,</span>rand<span class="operator">()%</span><span class="int">100</span><span class="operator">,</span>rand<span class="operator">()%</span><span class="int">100</span><span class="operator">);</span><span class="flow">
    return</span><span class="operator">(</span>A<span class="operator">-</span>B<span class="operator">*(</span>Vector<span class="operator">.</span>Dot<span class="operator">(</span>A<span class="operator">)/</span>Vector<span class="operator">.</span>Dot<span class="operator">(</span>B<span class="operator">))+</span>one<span class="operator">);
  }</span><span class="keyword">
  inline</span><span class="type"> bool</span> IsOn<span class="operator">(</span>Point s<span class="operator">){</span><span class="flow">
    return</span><span class="operator">(</span>abs<span class="operator">(</span>Vector<span class="operator">.</span>Dot<span class="operator">(</span>s<span class="operator">-</span>one<span class="operator">)) &lt;</span> EPS<span class="operator">);
  }</span><span class="keyword">
  inline</span> Line RandomLine<span class="operator">(){</span><span class="flow"> return</span><span class="operator">(</span>Line<span class="operator">(</span>RandomPoint<span class="operator">(),</span>RandomPoint<span class="operator">()));
  }</span><span class="keyword">
  inline</span> Point Intersect<span class="operator">(</span>Line s<span class="operator">){</span><span class="flow">
    if</span><span class="operator"> (</span>IsOn<span class="operator">(</span>s<span class="operator">.</span>A<span class="operator">))</span><span class="flow"> return</span><span class="operator">(</span>s<span class="operator">.</span>A<span class="operator">);</span><span class="flow">
    return</span><span class="operator">(</span>s<span class="operator">.</span>A<span class="operator">-</span>s<span class="operator">.</span>B<span class="operator">*((</span>Vector<span class="operator">.</span>Dot<span class="operator">(</span>s<span class="operator">.</span>A<span class="operator">)-</span>Vector<span class="operator">.</span>Dot<span class="operator">(</span>one<span class="operator">))/</span>Vector<span class="operator">.</span>Dot<span class="operator">(</span>s<span class="operator">.</span>B<span class="operator">)));
  }</span><span class="keyword">
  inline</span> Line Intersect<span class="operator"> (</span>Plane s<span class="operator">){</span><span class="flow">
    return</span><span class="operator">(</span>Line<span class="operator">(</span>Intersect<span class="operator">(</span>s<span class="operator">.</span>RandomLine<span class="operator">()),</span>
		Intersect<span class="operator">(</span>s<span class="operator">.</span>RandomLine<span class="operator">())));
  }
};</span>
</pre>

</body></html>